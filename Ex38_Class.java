package com.test.obj;

public class Ex38_Class {
	
	public static void main(String[] args) {
		
		//Ex38_Class.java
		
		/*
		클래스, Class
		- 코드의 집합
		- 같은 목적을 가지는 코드의 집합
		- 데이터 집합
		
	
	
	
		
		
		
		
		
		*/
		
		//요구사항] 지도가 있는데 우리집의 좌표값을 저장해서 추후 호출해서 사용하고 싶다
		
		//case 1.
		//- 간편, 즉시 생성
		//- 식별자 문제 > 같은 성질의 데이터를 저장하는 식별자(변수)가 서로 다른 이름을 사용
		// 왜 누구는 x고 누구는 x2냐고 하면 대답하기 어려움 그냥 변수를 구분하기 위해서라고 할 수 밖에,,,
		// 근데 만약 10000개가 있을때 전부 다 x좌표라는 성질이 비슷한데 변수 이름을 다 다르게 짓게 되면 뭐라고 설명할지?
		//				> 사용자 경험에만 의지함 x와 y가 한짝이겠지, x와 y2는 다른짝이겠지 하고 물리적 구조가 불안정함
		
		
		//우리집 좌표
		int x = 100; 	//위도
		int y = 200;	//경도
		
		System.out.printf("우리집은 [%d, %d]에 위치합니다.\n", x, y);
		
		
		//마트 좌표
		int x2 = 300;
		int y2 = 400;
		
		System.out.printf("마트는 [%d, %d]에 위치합니다.\n", x2, y2);
		
		
		
		
		
		
		
		//Case 2.
		//- 배열 사용
		//- 간편, 즉시 생성
		//- 데이터에 저장할 수 있는 저장구조 생성 > 관리가 용이 + 가독성 향상
		//데이터를 어떻게 해야 알기쉽고 조직적으로 저장할 수 있는지 공부해야 함
		//- 각 방의 데이터가 구분이 힘들다. > 100이 x인지? 200이 x 인지?? > 요소를 첨자(방번호)로 구분하기 때문에
		
		int[] kors = { 100, 90, 80 };	//같은 성질의 데이터(국어점수)를 넣었지만 사람이 다름 > 많이 사용
		//국어 점수라고 하고 사람만 바뀜
		//90은 두 번째 학생의 점수라고 할 순 있지만 길동이의 성적인지, 아무개의 성적인지는 모름
		
		int[] score = { 100, 95, 89, 77, 45 };	//1명의 점수(과목 5개) > 이 중에 국어점수가 뭐니? 하면 대답 못함 > 잘 사용 안함
		//사람은 지정됐고 과목만 바뀜
		
		//> 알아보기에는 int[] kors가 기억하기 더 쉬움
		
		
		
		
		
		//우리집
		int[] a1 = { 100, 200 };
		
		System.out.printf("우리집은 [%d, %d]에 위치합니다.\n", a1[0], a1[1]);
		
		//마트
		int[] a2 = { 300, 400 };
		
		System.out.printf("마트는 [%d, %d]에 위치합니다.\n", a2[0], a2[1]);
		System.out.println();
		
		
		
		
		
		//Case 3.
		//- 클래스 사용
		//- 데이터 구조 명확(p1.x와 p2.y는 절대 짝으로 보지 않음)
		
		
		
		//변수 생성
		//- 자료형 변수명; 
		int a;	//메모리에 4byte크기의 공간을 만들고 a라는 이름을 가짐
		
		//클래스(Point) 객체명(p1) = 객체 생성 연산자(new) 생성자(Point)(); 
//		Point p1 = new Point();		
		//Point는 무슨 형태로 저장이 되는지?
		//메모리 어딘가에 point 형태로 공간을 만들고 point공간은 int 2개가 모여서 생기는 값이고 int는 x, y라는 이름으로 구성됨
		
		//클래스의 객체(인스턴스)를 생성한다.
		//- 클래스 == 붕어빵틀 == 설계도 == 사람	== 포메라니언	//설명하면서 추상적
		//- 객체   == 붕어빵   == 제품   == 홍길동  == 똘이			//위를 설명하면서 구체적
//		Point p1 = new Point();
		//붕어빵틀은 붕어빵을 만들기 위한 규칙들을 가지고 있는 요소
		//붕어빵틀을 통해 양산된 붕어빵
		
		//홍길동, 아무개 등 30명의 사람이 있는데 다 다른 객체(Object)들임. 우리 객체들이 생김새가 비슷해(눈,귀 2개, 코,입 1개)
		//내 생김새와 앞의 생김새가 비슷하고 그런애들이 모여서 다르게 생긴 집단이랑 구분돼
		//나랑 똑같이 생긴 저것들을 묶어서 사람이라고 부르자
		//사람은 실존하는 요소에 대한 표현 X, 추상적인 표현 O
		
		//붕어빵틀이 먼저 태어나야 붕어빵을 탄생시킬 수 있음
		//설계도가 먼저 있어야 제품을 만들 수 있음
		//사람이 만든거에선 설계도가 먼저 > 제품이 나중에
		//자연적인 거는 다름. 포메라니언 말이 먼저냐 똘이처럼 생긴 강아지가 먼저 있었냐
		//똘이처럼 생긴 강아지가 먼저 있었음 > 생김새가 비슷한 강아지들을 묶어서 포메라니언이라 부르자 > 포메라니언 말 생김
		//자연계는 똘이들이 먼저고 그 특징들을 묶어서 포메라니언들이 나중에 생긴 말
		//인위적인 건 붕어빵틀이 먼저고 그다음 붕어빵
		
		//위는 설계도이자 설계도 객체들의 특징을 정의하는 특징
		
		//클래스는 아무것도 못함. 클래스를 통해 현실세계에 무언갈 만들어낼 순 있음 > 클래스는 설계도 같은 역할
		//나중에 만들어진 무언갈 위해 규칙만 만들어놓음 ex. int 두개를 만들어라~
		//그 설계에 따라 실제 현실(메모리)에 실체화 된 요소를 만들어낼 수 있음 > 만들어진 그 자체를 객체(instance)라고 부름
		//Point p1 = new Point(); > new Point가 붕어빵을 만든거고, 강아지를 태어나게 한거고, 홍길동을 태어나게 함
		//클래스 : 정수 2개가 있는 공간을 만든 것
		
		//우리집
		Point p1 = new Point();		//Point 클래스의 p1이라고 이름을 적어서 불러옴
		
		p1.x = 100;	//p1을 찾아가니까 Point 클래스에 int x, y가 있음 그 중 x를 불러서 int형이니까 int형 값을 넣어줌
		p1.y = 200;
		
//		(==)
		
		int[] a3 = new int[2];
		a3[0] = 100;
		a3[1] = 200;
		
		//'.' > 멤버 접근 연산자. 클래스를 불러올때는 .을 씀 배열의 []랑 같은 역할	//()설명에 대해 다시 보기
		//배열은 번호로 만들어져있는 데이터의 집합
		//클래스는 x,y같은 이름으로 만들어져있는 데이터의 집합
		
		System.out.printf("우리집은 [%d, %d]에 위치합니다.\n", p1.x, p1.y);
		
		
		//마트
		Point p2 = new Point();
		
		p2.x = 300;
		p2.y = 400;
		
		System.out.printf("마트는 [%d, %d]에 위치합니다.\n", p2.x, p2.y);
		System.out.println();
		
		
		
		
		
		Size s1 = new Size();	//객체가 만들어지고 그걸 얘가 가리킴
		
		s1.name = "노트북";
		s1.width = 60;
		s1.height = 50;
		
		System.out.printf("%s[%dcm, %dcm]", s1.name, s1.width, s1.height);
		
		
		/*
		//학생 점수] 
//		Student hong = new Student();
		
//		hong.name = "홍길동";
//		hong.kor = 100;
//		hong.eng = 90;
//		hong.math = 80;
		*/
		
		
		
		
		
		
		//UML(Unified Modeling Language) : 모델링(구현하고자 하는것들을 알기쉽게 설계하는것) 하는 언어
		//코딩전에 우리가 구현하고자 하는 걸 설계하는 언어
		//- 여러가지 다이어그램 
		//- 클래스 다이어그램 : 클래스가 어떻게 되어있고 클래스끼리 어떤 관계를 맺고 하는지 등을 그림으로 그리는 것(메인은 아님)
		//- 유스케이스
		//- 시퀀스 다이어그램
		//
		
		
		
		
		
		
		
	}//main
	
	
} //class


//클래스 선언하기

//class 클래스명 {
//	
//	//클래스 멤버 선언하기
//	public int a;	//public은 무조건 붙여야 함
//	public int b;
//	
//}

//좌표값을 저장하기 위한 목적의 클래스 생성
class Point {		//사용자 정의 자료형
	
	public int x;	//조합하고 싶은대로 맘대로 만들어도 됨
	public int y;	//다른사람이 나랑 같은 int x, y가 필요할땐 Point를 문법을 통해 공간을 만들면 x, y공간을 세트로 가져갈 수 있음
					// int, String 같은 자료형과 동등이 됨
	
	
	
} //Point


//제품의 크기를 저장하는 클래스

class Size {
	
	//배열은 int배열로 만들면 무조건 int만 저장할 수 있는데 class는 캘린더, 문자열 등등 아무거나 다 가능
	public String name; //제품명	
	public int width;	//너비
	public int height;	//높이
	//얘네를 생성과 동시에 팀이 됨 데려다가 너비나 높이를 입력해서 쓰면 됨
	
	
	
	
} //Size



////학생
//class Student {
//	
//	public String name;	//학생명
//	public int kor;		//국어
//	public int eng;		//영어
//	public int math;	//수학
	
	
	
	
}











